// Code generated by counterfeiter. DO NOT EDIT.
package fakek8sdrainer

import (
	"sync"

	"github.com/alphagov/gsp/components/aws-node-lifecycle-hook/pkg/k8sclient"
	"github.com/alphagov/gsp/components/aws-node-lifecycle-hook/pkg/k8sdrainer"
	v1 "k8s.io/api/core/v1"
)

type FakeDrainer struct {
	CordonStub        func(k8sclient.Client, *v1.Node) error
	cordonMutex       sync.RWMutex
	cordonArgsForCall []struct {
		arg1 k8sclient.Client
		arg2 *v1.Node
	}
	cordonReturns struct {
		result1 error
	}
	cordonReturnsOnCall map[int]struct {
		result1 error
	}
	DrainStub        func(k8sclient.Client, *v1.Node) error
	drainMutex       sync.RWMutex
	drainArgsForCall []struct {
		arg1 k8sclient.Client
		arg2 *v1.Node
	}
	drainReturns struct {
		result1 error
	}
	drainReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDrainer) Cordon(arg1 k8sclient.Client, arg2 *v1.Node) error {
	fake.cordonMutex.Lock()
	ret, specificReturn := fake.cordonReturnsOnCall[len(fake.cordonArgsForCall)]
	fake.cordonArgsForCall = append(fake.cordonArgsForCall, struct {
		arg1 k8sclient.Client
		arg2 *v1.Node
	}{arg1, arg2})
	fake.recordInvocation("Cordon", []interface{}{arg1, arg2})
	fake.cordonMutex.Unlock()
	if fake.CordonStub != nil {
		return fake.CordonStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cordonReturns
	return fakeReturns.result1
}

func (fake *FakeDrainer) CordonCallCount() int {
	fake.cordonMutex.RLock()
	defer fake.cordonMutex.RUnlock()
	return len(fake.cordonArgsForCall)
}

func (fake *FakeDrainer) CordonCalls(stub func(k8sclient.Client, *v1.Node) error) {
	fake.cordonMutex.Lock()
	defer fake.cordonMutex.Unlock()
	fake.CordonStub = stub
}

func (fake *FakeDrainer) CordonArgsForCall(i int) (k8sclient.Client, *v1.Node) {
	fake.cordonMutex.RLock()
	defer fake.cordonMutex.RUnlock()
	argsForCall := fake.cordonArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDrainer) CordonReturns(result1 error) {
	fake.cordonMutex.Lock()
	defer fake.cordonMutex.Unlock()
	fake.CordonStub = nil
	fake.cordonReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDrainer) CordonReturnsOnCall(i int, result1 error) {
	fake.cordonMutex.Lock()
	defer fake.cordonMutex.Unlock()
	fake.CordonStub = nil
	if fake.cordonReturnsOnCall == nil {
		fake.cordonReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cordonReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDrainer) Drain(arg1 k8sclient.Client, arg2 *v1.Node) error {
	fake.drainMutex.Lock()
	ret, specificReturn := fake.drainReturnsOnCall[len(fake.drainArgsForCall)]
	fake.drainArgsForCall = append(fake.drainArgsForCall, struct {
		arg1 k8sclient.Client
		arg2 *v1.Node
	}{arg1, arg2})
	fake.recordInvocation("Drain", []interface{}{arg1, arg2})
	fake.drainMutex.Unlock()
	if fake.DrainStub != nil {
		return fake.DrainStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.drainReturns
	return fakeReturns.result1
}

func (fake *FakeDrainer) DrainCallCount() int {
	fake.drainMutex.RLock()
	defer fake.drainMutex.RUnlock()
	return len(fake.drainArgsForCall)
}

func (fake *FakeDrainer) DrainCalls(stub func(k8sclient.Client, *v1.Node) error) {
	fake.drainMutex.Lock()
	defer fake.drainMutex.Unlock()
	fake.DrainStub = stub
}

func (fake *FakeDrainer) DrainArgsForCall(i int) (k8sclient.Client, *v1.Node) {
	fake.drainMutex.RLock()
	defer fake.drainMutex.RUnlock()
	argsForCall := fake.drainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDrainer) DrainReturns(result1 error) {
	fake.drainMutex.Lock()
	defer fake.drainMutex.Unlock()
	fake.DrainStub = nil
	fake.drainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDrainer) DrainReturnsOnCall(i int, result1 error) {
	fake.drainMutex.Lock()
	defer fake.drainMutex.Unlock()
	fake.DrainStub = nil
	if fake.drainReturnsOnCall == nil {
		fake.drainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.drainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDrainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cordonMutex.RLock()
	defer fake.cordonMutex.RUnlock()
	fake.drainMutex.RLock()
	defer fake.drainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDrainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8sdrainer.Drainer = new(FakeDrainer)
