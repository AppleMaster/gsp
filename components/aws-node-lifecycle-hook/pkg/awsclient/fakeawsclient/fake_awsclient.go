// Code generated by counterfeiter. DO NOT EDIT.
package fakeawsclient

import (
	"context"
	"sync"

	"github.com/alphagov/gsp/components/aws-node-lifecycle-hook/pkg/awsclient"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/autoscaling"
)

type FakeClient struct {
	CompleteLifecycleActionWithContextStub        func(context.Context, *autoscaling.CompleteLifecycleActionInput, ...request.Option) (*autoscaling.CompleteLifecycleActionOutput, error)
	completeLifecycleActionWithContextMutex       sync.RWMutex
	completeLifecycleActionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *autoscaling.CompleteLifecycleActionInput
		arg3 []request.Option
	}
	completeLifecycleActionWithContextReturns struct {
		result1 *autoscaling.CompleteLifecycleActionOutput
		result2 error
	}
	completeLifecycleActionWithContextReturnsOnCall map[int]struct {
		result1 *autoscaling.CompleteLifecycleActionOutput
		result2 error
	}
	RecordLifecycleActionHeartbeatWithContextStub        func(context.Context, *autoscaling.RecordLifecycleActionHeartbeatInput, ...request.Option) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error)
	recordLifecycleActionHeartbeatWithContextMutex       sync.RWMutex
	recordLifecycleActionHeartbeatWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *autoscaling.RecordLifecycleActionHeartbeatInput
		arg3 []request.Option
	}
	recordLifecycleActionHeartbeatWithContextReturns struct {
		result1 *autoscaling.RecordLifecycleActionHeartbeatOutput
		result2 error
	}
	recordLifecycleActionHeartbeatWithContextReturnsOnCall map[int]struct {
		result1 *autoscaling.RecordLifecycleActionHeartbeatOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CompleteLifecycleActionWithContext(arg1 context.Context, arg2 *autoscaling.CompleteLifecycleActionInput, arg3 ...request.Option) (*autoscaling.CompleteLifecycleActionOutput, error) {
	fake.completeLifecycleActionWithContextMutex.Lock()
	ret, specificReturn := fake.completeLifecycleActionWithContextReturnsOnCall[len(fake.completeLifecycleActionWithContextArgsForCall)]
	fake.completeLifecycleActionWithContextArgsForCall = append(fake.completeLifecycleActionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *autoscaling.CompleteLifecycleActionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CompleteLifecycleActionWithContext", []interface{}{arg1, arg2, arg3})
	fake.completeLifecycleActionWithContextMutex.Unlock()
	if fake.CompleteLifecycleActionWithContextStub != nil {
		return fake.CompleteLifecycleActionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.completeLifecycleActionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CompleteLifecycleActionWithContextCallCount() int {
	fake.completeLifecycleActionWithContextMutex.RLock()
	defer fake.completeLifecycleActionWithContextMutex.RUnlock()
	return len(fake.completeLifecycleActionWithContextArgsForCall)
}

func (fake *FakeClient) CompleteLifecycleActionWithContextCalls(stub func(context.Context, *autoscaling.CompleteLifecycleActionInput, ...request.Option) (*autoscaling.CompleteLifecycleActionOutput, error)) {
	fake.completeLifecycleActionWithContextMutex.Lock()
	defer fake.completeLifecycleActionWithContextMutex.Unlock()
	fake.CompleteLifecycleActionWithContextStub = stub
}

func (fake *FakeClient) CompleteLifecycleActionWithContextArgsForCall(i int) (context.Context, *autoscaling.CompleteLifecycleActionInput, []request.Option) {
	fake.completeLifecycleActionWithContextMutex.RLock()
	defer fake.completeLifecycleActionWithContextMutex.RUnlock()
	argsForCall := fake.completeLifecycleActionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) CompleteLifecycleActionWithContextReturns(result1 *autoscaling.CompleteLifecycleActionOutput, result2 error) {
	fake.completeLifecycleActionWithContextMutex.Lock()
	defer fake.completeLifecycleActionWithContextMutex.Unlock()
	fake.CompleteLifecycleActionWithContextStub = nil
	fake.completeLifecycleActionWithContextReturns = struct {
		result1 *autoscaling.CompleteLifecycleActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CompleteLifecycleActionWithContextReturnsOnCall(i int, result1 *autoscaling.CompleteLifecycleActionOutput, result2 error) {
	fake.completeLifecycleActionWithContextMutex.Lock()
	defer fake.completeLifecycleActionWithContextMutex.Unlock()
	fake.CompleteLifecycleActionWithContextStub = nil
	if fake.completeLifecycleActionWithContextReturnsOnCall == nil {
		fake.completeLifecycleActionWithContextReturnsOnCall = make(map[int]struct {
			result1 *autoscaling.CompleteLifecycleActionOutput
			result2 error
		})
	}
	fake.completeLifecycleActionWithContextReturnsOnCall[i] = struct {
		result1 *autoscaling.CompleteLifecycleActionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RecordLifecycleActionHeartbeatWithContext(arg1 context.Context, arg2 *autoscaling.RecordLifecycleActionHeartbeatInput, arg3 ...request.Option) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	fake.recordLifecycleActionHeartbeatWithContextMutex.Lock()
	ret, specificReturn := fake.recordLifecycleActionHeartbeatWithContextReturnsOnCall[len(fake.recordLifecycleActionHeartbeatWithContextArgsForCall)]
	fake.recordLifecycleActionHeartbeatWithContextArgsForCall = append(fake.recordLifecycleActionHeartbeatWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *autoscaling.RecordLifecycleActionHeartbeatInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RecordLifecycleActionHeartbeatWithContext", []interface{}{arg1, arg2, arg3})
	fake.recordLifecycleActionHeartbeatWithContextMutex.Unlock()
	if fake.RecordLifecycleActionHeartbeatWithContextStub != nil {
		return fake.RecordLifecycleActionHeartbeatWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.recordLifecycleActionHeartbeatWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) RecordLifecycleActionHeartbeatWithContextCallCount() int {
	fake.recordLifecycleActionHeartbeatWithContextMutex.RLock()
	defer fake.recordLifecycleActionHeartbeatWithContextMutex.RUnlock()
	return len(fake.recordLifecycleActionHeartbeatWithContextArgsForCall)
}

func (fake *FakeClient) RecordLifecycleActionHeartbeatWithContextCalls(stub func(context.Context, *autoscaling.RecordLifecycleActionHeartbeatInput, ...request.Option) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error)) {
	fake.recordLifecycleActionHeartbeatWithContextMutex.Lock()
	defer fake.recordLifecycleActionHeartbeatWithContextMutex.Unlock()
	fake.RecordLifecycleActionHeartbeatWithContextStub = stub
}

func (fake *FakeClient) RecordLifecycleActionHeartbeatWithContextArgsForCall(i int) (context.Context, *autoscaling.RecordLifecycleActionHeartbeatInput, []request.Option) {
	fake.recordLifecycleActionHeartbeatWithContextMutex.RLock()
	defer fake.recordLifecycleActionHeartbeatWithContextMutex.RUnlock()
	argsForCall := fake.recordLifecycleActionHeartbeatWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) RecordLifecycleActionHeartbeatWithContextReturns(result1 *autoscaling.RecordLifecycleActionHeartbeatOutput, result2 error) {
	fake.recordLifecycleActionHeartbeatWithContextMutex.Lock()
	defer fake.recordLifecycleActionHeartbeatWithContextMutex.Unlock()
	fake.RecordLifecycleActionHeartbeatWithContextStub = nil
	fake.recordLifecycleActionHeartbeatWithContextReturns = struct {
		result1 *autoscaling.RecordLifecycleActionHeartbeatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RecordLifecycleActionHeartbeatWithContextReturnsOnCall(i int, result1 *autoscaling.RecordLifecycleActionHeartbeatOutput, result2 error) {
	fake.recordLifecycleActionHeartbeatWithContextMutex.Lock()
	defer fake.recordLifecycleActionHeartbeatWithContextMutex.Unlock()
	fake.RecordLifecycleActionHeartbeatWithContextStub = nil
	if fake.recordLifecycleActionHeartbeatWithContextReturnsOnCall == nil {
		fake.recordLifecycleActionHeartbeatWithContextReturnsOnCall = make(map[int]struct {
			result1 *autoscaling.RecordLifecycleActionHeartbeatOutput
			result2 error
		})
	}
	fake.recordLifecycleActionHeartbeatWithContextReturnsOnCall[i] = struct {
		result1 *autoscaling.RecordLifecycleActionHeartbeatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.completeLifecycleActionWithContextMutex.RLock()
	defer fake.completeLifecycleActionWithContextMutex.RUnlock()
	fake.recordLifecycleActionHeartbeatWithContextMutex.RLock()
	defer fake.recordLifecycleActionHeartbeatWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ awsclient.Client = new(FakeClient)
