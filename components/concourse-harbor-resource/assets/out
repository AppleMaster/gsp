#!/bin/bash

function log() {
	echo 1>&2 "$1"
}

log "starting harbor resource..."

set -euo pipefail
shopt -s expand_aliases

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

context="${1}"

if [ -z "${context}" ]; then
	log "usage: $0 <path/to/context>"
	exit 1
fi

# add jq into our path
PATH="/usr/local/bin:${PATH}"

log "writing payload to temp file"
payload=$(mktemp /tmp/resource-in.XXXXXX)
cat > "${payload}" <&0

cd "${context}"

log "loading repository config..."
repository=$(jq -r '.source.repository // ""' < "${payload}")
username=$(jq -r '.source.username // ""' < "${payload}")
password=$(jq -r '.source.password // ""' < "${payload}")

log "parsing resporitory uri..."
echo "${repository}" | tr '/' '\n' > repository_array

log "validating repository uri..."
if [ "$(wc -l < repository_array | awk '{print $1}')" -ne "3" ]; then
	log "'repository' needs to be a gun (<registry>/<project>/<image>), got: ${repository}"
	exit 1
fi

log "determining project name..."
project_name=$(sed -n '2p' < repository_array)
echo "project: ${project_name}"

log "loading harbor config..."
harbor_url=$(jq -r '.source.harbor.url // ""' < "${payload}")
notary_url=$(jq -r '.source.notary.url // ""' < "${payload}")
root_key=$(jq -r '.source.notary.root_key // ""' < "${payload}") # root key
delegate_key=$(jq -r '.source.notary.delegate_key // ""' < "${payload}") # delegate / ci key
harbor_public=$(jq -r '.source.harbor.public // "true"' < "${payload}")
harbor_enable_content_trust=$(jq -r '.source.harbor.enable_content_trust // "true"' < "${payload}")
harbor_prevent_vul=$(jq -r '.source.harbor.prevent_vul // "true"' < "${payload}")
harbor_severity=$(jq -r '.source.harbor.severity // "medium"' < "${payload}")
harbor_auto_scan=$(jq -r '.source.harbor.auto_scan // "true"' < "${payload}")

log "loading notary config..."
NOTARY_AUTH=$(echo -n "${username}:${password}" | base64)
NOTARY_ROOT_PASSPHRASE=$(jq -r '.source.notary.passphrase.root // ""' < "${payload}")
NOTARY_SNAPSHOT_PASSPHRASE=$(jq -r '.source.notary.passphrase.snapshot // ""' < "${payload}")
NOTARY_TARGETS_PASSPHRASE=$(jq -r '.source.notary.passphrase.targets // ""' < "${payload}")
NOTARY_DELEGATION_PASSPHRASE=$(jq -r '.source.notary.passphrase.delegation // ""' < "${payload}")

export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE="${NOTARY_ROOT_PASSPHRASE}"
export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="${NOTARY_DELEGATION_PASSPHRASE}"
export DOCKER_CONTENT_TRUST_SERVER="${notary_url}"
export NOTARY_AUTH NOTARY_ROOT_PASSPHRASE NOTARY_SNAPSHOT_PASSPHRASE NOTARY_TARGETS_PASSPHRASE NOTARY_DELEGATION_PASSPHRASE

alias hurl='curl --fail -u "${username}:${password}" -H "Accept: application/json" -H "Content-Type: application/json"'
alias dockernotary='notary -s ${DOCKER_CONTENT_TRUST_SERVER} -d ~/.docker/trust'

function clean_up_notary() {
	log "  =====> leaving the current state is most likely to damage this project on notary"
	log "  =====> cleaning up notary setup"
	dockernotary delete "${1}" --remote
	exit 1
}

function project_exits() {
	hurl --head "${harbor_url}/api/projects?project_name=${1}"
}

function get_project_id() {
	hurl -X GET "${harbor_url}/api/projects?name=${1}" | jq -r '.[0].project_id'
}

function create_project() {
	harbor_public="${harbor_public}"
	harbor_enable_content_trust="${harbor_enable_content_trust}"
	harbor_prevent_vul="${harbor_prevent_vul}"
	harbor_severity="${harbor_severity}"
	harbor_auto_scan="${harbor_auto_scan}"

	hurl -X POST "${harbor_url}/api/projects" -d @- <<-EOF
	{
		"project_name": "${1}",
		"metadata": {
			"public": "${harbor_public}",
			"enable_content_trust": "${harbor_enable_content_trust}",
			"prevent_vul": "${harbor_prevent_vul}",
			"severity": "${harbor_severity}",
			"auto_scan": "${harbor_auto_scan}"
		}
	}
	EOF
}

function update_project() {
	harbor_public="${harbor_public}"
	harbor_enable_content_trust="${harbor_enable_content_trust}"
	harbor_prevent_vul="${harbor_prevent_vul}"
	harbor_severity="${harbor_severity}"
	harbor_auto_scan="${harbor_auto_scan}"

	hurl -X PUT "${harbor_url}/api/projects/${2}" -d @- <<-EOF
	{
		"project_name": "${1}",
		"metadata": {
			"public": "${harbor_public}",
			"enable_content_trust": "${harbor_enable_content_trust}",
			"prevent_vul": "${harbor_prevent_vul}",
			"severity": "${harbor_severity}",
			"auto_scan": "${harbor_auto_scan}"
		}
	}
	EOF
}

log "  =====> create or update '${project_name}'"
if project_exits "${project_name}"; then
	log "  =====> project does exist... updating"
	update_project "${project_name}" "$(get_project_id ${project_name})"
else
	log "  =====> project does NOT exist... creating"
	create_project "${project_name}"
fi

if [[ "${harbor_enable_content_trust}" == "true" ]]; then
  log "  =====> importing root key"
  echo "${root_key}" > /tmp/root.key
  dockernotary key import /tmp/root.key --role root

  log "  =====> importing delegate key"
  echo "${delegate_key}" > /tmp/ci.key
  dockernotary key import /tmp/ci.key --role ci

  dockernotary key list

  log "  =====> checking if delegation for repository is on the listing"
  if ! dockernotary delegation list "${repository}" > /dev/null 2>&1; then
    log "  =====> initialising repo: ${repository}"
    dockernotary init "${repository}" -p || clean_up_notary "${repository}"

    log "  =====> moving snapshot key to server"
    dockernotary key rotate "${repository}" snapshot -r || clean_up_notary "${repository}"

    log "  =====> creating ci csr"
    openssl req -new -sha256 -key /tmp/ci.key -out /tmp/ci.csr -subj "/C=/ST=/L=/O=GDS/OU=/CN=ci" || clean_up_notary "${repository}"

    log "  =====> creating cert from csr and key - expiry: 10 years"
    openssl x509 -req -sha256 -days 3650 -in /tmp/ci.csr -signkey /tmp/ci.key -out /tmp/ci.crt || clean_up_notary "${repository}"

    log "  =====> delegating to ci key"
    dockernotary delegation add "${repository}" targets/releases /tmp/ci.crt --all-paths -p || clean_up_notary "${repository}"
  fi
  export DOCKER_CONTENT_TRUST=1
fi

log "  =====> moving on to docker-image-resource"

# Revert concourse weirdness
exec 1>&3

/opt/resource/out.origin "${context}" < "${payload}"
