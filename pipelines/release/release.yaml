groups:
- name: release
  jobs:
  - build-concourse-task-toolbox
  - build-service-operator
  - build-concourse-operator
  - build-concourse-github-resource
  - build-concourse-harbor-resource
  - bump-version
  - package
- name: version
  jobs:
  - bump-major
  - bump-minor
  - bump-version
- name: selfupdate
  jobs:
  - selfupdate

resource_types:

- name: github
  type: registry-image
  source:
    repository: "govsvc/concourse-github-resource"
    tag: "gsp-v1.0.91"

- name: concourse-pipeline
  type: docker-image
  source:
    repository: concourse/concourse-pipeline-resource
    tag: "2.2.0"

- name: paas-semver
  type: docker-image
  source:
    repository: governmentpaas/semver-resource
    tag: latest

resources:

- name: semver
  type: paas-semver
  source:
    driver: s3
    key: gsp-version
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    initial_version: '1.1.0'

- name: platform
  type: github
  source:
    uri: https://github.com/alphagov/gsp.git
    organization: alphagov
    repository: gsp
    ignore_paths:
      - components
    github_api_token: ((github-api-token))
    approvers: ((github-approvers))
    required_approval_count: 1
    branch: ((branch))
    commit_verification_keys: ((trusted-developer-keys))

- name: concourse-task-toolbox-source
  type: github
  source:
    uri: https://github.com/alphagov/gsp.git
    organization: alphagov
    repository: gsp
    paths:
      - components/concourse-task-toolbox-source
    github_api_token: ((github-api-token))
    approvers: ((config-approvers))
    required_approval_count: 1
    branch: ((branch))
    commit_verification_keys: ((trusted-developer-keys))

- name: concourse-github-resource-source
  type: github
  source:
    uri: https://github.com/alphagov/gsp.git
    organization: alphagov
    repository: gsp
    paths:
      - components/concourse-github-resource
    github_api_token: ((github-api-token))
    approvers: ((github-approvers))
    required_approval_count: 1
    branch: ((branch))
    commit_verification_keys: ((trusted-developer-keys))

- name: concourse-harbor-resource-source
  type: github
  source:
    uri: https://github.com/alphagov/gsp.git
    organization: alphagov
    repository: gsp
    paths:
      - components/concourse-harbor-resource
    github_api_token: ((github-api-token))
    approvers: ((github-approvers))
    required_approval_count: 1
    branch: ((branch))
    commit_verification_keys: ((trusted-developer-keys))

- name: concourse-operator-source
  type: github
  source:
    uri: https://github.com/alphagov/gsp.git
    organization: alphagov
    repository: gsp
    paths:
      - components/concourse-operator
    github_api_token: ((github-api-token))
    approvers: ((github-approvers))
    required_approval_count: 1
    branch: ((branch))
    commit_verification_keys: ((trusted-developer-keys))

- name: service-operator-source
  type: github
  source:
    uri: https://github.com/alphagov/gsp.git
    organization: alphagov
    repository: gsp
    paths:
      - components/service-operator
    github_api_token: ((github-api-token))
    approvers: ((github-approvers))
    required_approval_count: 1
    branch: ((branch))
    commit_verification_keys: ((trusted-developer-keys))

- name: users
  type: github-release
  source:
    owner: alphagov
    repository: gds-trusted-developers
    access_token: ((github-api-token))
    release: true

- name: pipeline
  type: concourse-pipeline
  source:
    teams:
    - name: gsp
      username: gsp
      password: ((readonly_local_user_password))

- name: concourse-github-resource
  type: docker-image
  source:
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    repository: govsvc/concourse-github-resource

- name: concourse-harbor-resource
  type: docker-image
  source:
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    repository: govsvc/concourse-harbor-resource

- name: concourse-operator
  type: docker-image
  source:
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    repository: govsvc/concourse-operator

- name: service-operator
  type: docker-image
  source:
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    repository: govsvc/service-operator

- name: concourse-task-toolbox
  type: docker-image
  source:
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    repository: govsvc/task-toolbox

- name: pre-release
  type: github-release
  source:
    owner: alphagov
    repository: gsp
    access_token: ((github-api-token))
    release: false
    pre_release: true
    tag_filter: ^((github-release-tag-prefix))v(\d+\.\d+\.\d+)$

- name: candidate-release
  type: github-release
  source:
    owner: alphagov
    repository: gsp
    access_token: ((github-api-token))
    release: false
    pre_release: true
    tag_filter: ^((github-release-tag-prefix))v(\d+\.\d+\.\d+.*)$

jobs:

- name: selfupdate
  serial: true
  serial_groups: [release]
  plan:
  - in_parallel:
    - get: platform
      trigger: true
    - get: users
      trigger: true
  - task: generate-trusted-contributors
    file: platform/pipelines/tasks/generate-trusted-contributors.yaml
    params:
      CLUSTER_PUBLIC_KEY: ((ci-system-gpg-public))
  - put: pipeline
    params:
      pipelines:
      - name: ((pipeline-name))
        team: gsp
        config_file: platform/pipelines/release/release.yaml
        vars_files:
        - trusted-contributors/github.vars.yaml
        - trusted-contributors/keys.vars.yaml
        vars:
          branch: ((branch))
          pipeline-name: ((pipeline-name))
          github-release-tag-prefix: ((github-release-tag-prefix))

- name: build-concourse-task-toolbox
  serial: true
  serial_groups: [build-concourse-task-toolbox]
  plan:
  - in_parallel:
    - get: concourse-task-toolbox-source
      trigger: true
    - get: concourse-task-toolbox
      params:
        save: true
  - put: concourse-task-toolbox
    params:
      build: concourse-task-toolbox-source/components/concourse-task-toolbox
      dockerfile: concourse-task-toolbox-source/components/concourse-task-toolbox/Dockerfile
      load_base: concourse-task-toolbox
      tag_file: concourse-task-toolbox-source/.git/short_ref
      tag_prefix: ((github-release-tag-prefix))v
      tag_as_latest: true
    get_params:
      skip_download: true

- name: build-concourse-github-resource
  serial: true
  serial_groups: [build-concourse-github-resource]
  plan:
  - get: concourse-github-resource-source
    trigger: true
  - put: concourse-github-resource
    params:
      build: concourse-github-resource-source/components/concourse-github-resource
      dockerfile: concourse-github-resource-source/components/concourse-github-resource/Dockerfile
      tag_file: concourse-github-resource-source/.git/short_ref
      tag_prefix: ((github-release-tag-prefix))v
      tag_as_latest: true
    get_params:
      skip_download: true

- name: build-concourse-harbor-resource
  serial: true
  serial_groups: [build-concourse-harbor-resource]
  plan:
  - get: concourse-harbor-resource-source
    trigger: true
  - put: concourse-harbor-resource
    params:
      build: concourse-harbor-resource-source/components/concourse-harbor-resource
      dockerfile: concourse-harbor-resource-source/components/concourse-harbor-resource/Dockerfile
      tag_file: concourse-harbor-resource-source/.git/short_ref
      tag_prefix: ((github-release-tag-prefix))v
      tag_as_latest: true
    get_params:
      skip_download: true

- name: build-concourse-operator
  serial: true
  serial_groups: [build-concourse-operator]
  plan:
  - get: concourse-operator-source
    trigger: true
  - put: concourse-operator
    params:
      build: concourse-operator-source/components/concourse-operator
      dockerfile: concourse-operator-source/components/concourse-operator/Dockerfile
      tag_file: concourse-operator-source/.git/short_ref
      tag_prefix: ((github-release-tag-prefix))v
      tag_as_latest: true
    get_params:
      skip_download: true

- name: build-service-operator
  serial: true
  serial_groups: [build-service-operator]
  plan:
  - get: service-operator-source
    trigger: true
  - put: service-operator
    params:
      build: service-operator-source/components/service-operator
      dockerfile: service-operator-source/components/service-operator/Dockerfile
      tag_file: service-operator-source/.git/short_ref
      tag_prefix: ((github-release-tag-prefix))v
      tag_as_latest: true
    get_params:
      skip_download: true

- name: bump-version
  serial: true
  serial_groups:
    - release
    - build-concourse-task-toolbox
    - build-concourse-github-resource
    - build-concourse-harbor-resource
    - build-concourse-operator
    - build-service-operator
  plan:
  - in_parallel:
    - get: platform
      passed: [selfupdate]
      trigger: true
    - get: concourse-task-toolbox
      passed: [build-concourse-task-toolbox]
      trigger: true
    - get: concourse-github-resource
      passed: [build-concourse-github-resource]
      trigger: true
    - get: concourse-harbor-resource
      passed: [build-concourse-harbor-resource]
      trigger: true
    - get: concourse-operator
      passed: [build-concourse-operator]
      trigger: true
    - get: service-operator
      passed: [build-service-operator]
      trigger: true
  - put: semver
    params:
      bump: patch

- name: package
  serial: true
  serial_groups:
    - release
  plan:
  - in_parallel:
    - get: semver
      passed: [bump-version]
      trigger: true
    - get: platform
      passed: [bump-version]
    - get: concourse-task-toolbox
      passed: [bump-version]
    - get: concourse-github-resource
      passed: [bump-version]
    - get: concourse-harbor-resource
      passed: [bump-version]
    - get: concourse-operator
      passed: [bump-version]
    - get: service-operator
      passed: [bump-version]
  - task: generate-gsp-cluster-values
    image: concourse-task-toolbox
    config:
      platform: linux
      inputs:
      - name: platform
      - name: concourse-task-toolbox
      - name: concourse-github-resource
      - name: concourse-harbor-resource
      - name: concourse-operator
      - name: service-operator
      outputs:
      - name: cluster-values
      run:
        path: /bin/bash
        args:
          - -euo
          - pipefail
          - -c
          - |
            echo "generating helm values for latest image versions..."
            mkdir -p cluster-values
            cat << EOF > ./overrides.yaml
            pipelineOperator:
              image:
                repository: $(cat concourse-operator/repository)@$(cat concourse-operator/digest | cut -d ':' -f 1)
                tag: $(cat concourse-operator/digest | cut -d ':' -f 2)
            serviceOperator:
              image:
                repository: $(cat service-operator/repository)@$(cat service-operator/digest | cut -d ':' -f 1)
                tag: $(cat service-operator/digest | cut -d ':' -f 2)
            concourseResources:
              task:
                image:
                  repository: $(cat concourse-task-toolbox/repository)@$(cat concourse-task-toolbox/digest | cut -d ':' -f 1)
                  tag: $(cat concourse-task-toolbox/digest | cut -d ':' -f 2)
              github:
                image:
                  repository: $(cat concourse-github-resource/repository)@$(cat concourse-github-resource/digest | cut -d ':' -f 1)
                  tag: $(cat concourse-github-resource/digest | cut -d ':' -f 2)
              harbor:
                image:
                  repository: $(cat concourse-harbor-resource/repository)@$(cat concourse-harbor-resource/digest | cut -d ':' -f 1)
                  tag: $(cat concourse-harbor-resource/digest | cut -d ':' -f 2)
            EOF
            echo "merging with cluster values..."
            spruce merge ./platform/charts/gsp-cluster/values.yaml ./overrides.yaml | tee -a cluster-values/values.yaml
  - task: package-gsp-cluster
    image: concourse-task-toolbox
    config:
      platform: linux
      inputs:
      - name: platform
      - name: semver
      - name: cluster-values
      outputs:
      - name: cluster-package
      params:
        CLUSTER_PRIVATE_KEY: ((ci-system-gpg-private))
      run:
        path: /bin/bash
        args:
        - -eu
        - -c
        - |
          echo "preparing keyring..."
          echo "${CLUSTER_PRIVATE_KEY}" > key
          gpg --import key
          gpg --export-secret-keys > ~/.gnupg/pubring.gpg
          KEY_ID="$(gpg --list-secret-keys --with-colons  | awk -F: '/uid:/ {print $10}' | head -n1)"
          echo "building chart with release values..."
          CHART_NAME=$(yq . < ./platform/charts/gsp-cluster/Chart.yaml | jq -r .name)
          cp -r "./platform/charts/gsp-cluster" "./${CHART_NAME}"
          cp "./cluster-values/values.yaml" "./${CHART_NAME}/values.yaml"
          mkdir -p cluster-package
          APP_VERSION=$(cat ./platform/.git/short_ref)
          CHART_VERSION=$(cat ./semver/version)
          echo "generating signed (${KEY_ID}) helm package for ${CHART_NAME} at app-version: '${APP_VERSION}' chart-version: '${CHART_VERSION}'..."
          helm package \
            --app-version "${APP_VERSION}" \
            --version "${CHART_VERSION}" \
            --destination "./cluster-package/" \
            --save=false \
            --sign \
            --key "${KEY_ID}" \
            "./${CHART_NAME}"
  - task: package-gsp-istio
    image: concourse-task-toolbox
    config:
      platform: linux
      inputs:
      - name: platform
      - name: semver
      outputs:
      - name: istio-package
      params:
        CLUSTER_PRIVATE_KEY: ((ci-system-gpg-private))
      run:
        path: /bin/bash
        args:
        - -eu
        - -c
        - |
          echo "preparing keyring..."
          echo "${CLUSTER_PRIVATE_KEY}" > key
          gpg --import key
          gpg --export-secret-keys > ~/.gnupg/pubring.gpg
          KEY_ID="$(gpg --list-secret-keys --with-colons  | awk -F: '/uid:/ {print $10}' | head -n1)"
          echo "building chart with release values..."
          CHART_NAME=$(yq . < ./platform/charts/gsp-istio/Chart.yaml | jq -r .name)
          cp -r "./platform/charts/gsp-istio" "./${CHART_NAME}"
          mkdir -p istio-package
          APP_VERSION=$(cat ./platform/.git/short_ref)
          CHART_VERSION=$(cat ./semver/version)
          echo "generating signed (${KEY_ID}) helm package for ${CHART_NAME} at app-version: '${APP_VERSION}' chart-version: '${CHART_VERSION}'..."
          helm package \
            --app-version "${APP_VERSION}" \
            --version "${CHART_VERSION}" \
            --destination "./istio-package/" \
            --save=false \
            --sign \
            --key "${KEY_ID}" \
            "./${CHART_NAME}"
  - task: package-deployer-vars
    image: concourse-task-toolbox
    config:
      platform: linux
      inputs:
      - name: platform
      - name: concourse-task-toolbox
      outputs:
      - name: deployer-package
      run:
        path: /bin/bash
        args:
        - -eu
        - -c
        - |
          echo "generate overrides for pipeline default values..."
          mkdir -p deployer-package
          echo "copying deployer config to release dir..."
          cp platform/pipelines/deployer/* deployer-package/
          cat << EOF > ./overrides.yaml
          task-toolbox-image: $(cat concourse-task-toolbox/repository)@$(cat concourse-task-toolbox/digest | cut -d ':' -f 1)
          task-toolbox-tag: $(cat concourse-task-toolbox/digest | cut -d ':' -f 2)
          github-resource-image: $(cat concourse-github-resource/repository)@$(cat concourse-github-resource/digest | cut -d ':' -f 1)
          github-resource-tag: $(cat concourse-github-resource/digest | cut -d ':' -f 2)
          EOF
          echo overrides.yaml
          echo "merging with default values..."
          spruce merge ./platform/pipelines/deployer/deployer.defaults.yaml ./overrides.yaml | tee -a ./deployer-package/deployer.defaults.yaml
  - put: candidate-release
    params:
      name: semver/version
      tag: semver/version
      tag_prefix: ((github-release-tag-prefix))rc-v
      commitish: platform/.git/ref
      globs:
      - cluster-package/*
      - deployer-package/*
      - istio-package/*
    get_params:
      include_source_tarball: true
  - task: sign-release
    image: concourse-task-toolbox
    config:
      platform: linux
      inputs:
      - name: candidate-release
      outputs:
      - name: signed-release
      params:
        CLUSTER_PRIVATE_KEY: ((ci-system-gpg-private))
      run:
        path: /bin/bash
        args:
        - -eu
        - -c
        - |
          mkdir -p tarball-signature
          echo "preparing keyring to sign deployer-package release..."
          echo "${CLUSTER_PRIVATE_KEY}" > key
          gpg --import key
          echo "signing release tarball..."
          for file in candidate-release/*; do
            filesize=$(stat -c "%s" "${file}")
            if [[ ${filesize} -gt 0 ]]
            then
              echo "signing ${file}..."
              gpg --armor --detach-sign "$file"
              cp ${file}* signed-release/
            else
              echo "warning: skipping zero-length file: ${file}"
            fi
          done
  - put: pre-release
    params:
      name: semver/version
      tag: semver/version
      tag_prefix: ((github-release-tag-prefix))v
      commitish: platform/.git/ref
      globs:
      - signed-release/*

- name: bump-major
  serial_groups: [release]
  plan:
  - put: semver
    params:
      bump: major
- name: bump-minor
  serial_groups: [release]
  plan:
  - put: semver
    params:
      bump: minor
